{"version":3,"sources":["tweets/TweetActions.js","tweets/Tweet.js","tweets/loadTweets.js","tweets/TweetList.js","tweets/index.js","tweets/TweetsComponent.js","App.js","reportWebVitals.js","index.js"],"names":["TweetActions","props","tweet","action","useState","likes","setLikes","userLike","setUserLike","className","display","type","onClick","event","Tweet","id","content","map","t","i","loadTweets","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","err","console","log","message","send","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","newTweets","useEffect","finalTweets","length","alert","index","TweetsComponent","textAreaRef","React","createRef","setNewTweets","onSubmit","preventDefault","newVal","current","value","tempTweet","unshift","required","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","root","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4e96097e.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nexport function TweetActions(props) {\n    const { tweet, action } = props\n    const [ likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [ userLike, setUserLike ] = useState(tweet.likes ? true : false)\n    const className = props.className ? props.className : \"btn btn-primary m-3\"\n    const display = action.type === \"like\" ? `${ likes } Likes` : action.type\n\n    const handleClick = event => {\n        if (action.type === \"like\") {\n            if (userLike) {\n                setLikes(likes - 1)\n                setUserLike(false)\n            } else {\n                setLikes(likes + 1)\n                setUserLike(true)\n            }\n        }\n    }\n\n    return (\n        <div>\n            <button className={ className } onClick={ handleClick }>{ display }</button> \n        </div>\n    )\n}\n\n","import React from 'react';\nimport { TweetActions } from \"./TweetActions\"\n\nexport function Tweet(props) {\n    const { tweet } = props;\n    const className = props.className ? props.className : \"my-10 mx-auto bg-light text-dark\";\n    return (\n        <div className={className}>\n            <p>{tweet.id}: {tweet.content}</p>\n            {\n                [\"like\", \"unlike\", \"retweet\", \"delete\"]\n                    .map((t, i) => <TweetActions key={i} tweet={ tweet } action={{ type: t }}/>)\n            }\n        </div>\n    )\n}\n\n","\nconst loadTweets = callback => {\n    const xhr = new XMLHttpRequest();\n    const method = \"GET\";\n    const url = \"http://127.0.0.1:8000/api/v1/tweets/\";\n    const responseType = \"json\";\n    xhr.responseType = responseType;\n    xhr.open(method, url);\n    xhr.onload = () => {\n        callback(xhr.response, xhr.status);\n    };\n    xhr.onerror = err => {\n        console.log(err);\n        callback({ message: \"Somehting is wrong!\" }, 400);\n    };\n    xhr.send();\n}\n\nexport default loadTweets","import React, { useState, useEffect } from 'react'\nimport { Tweet } from \"./Tweet\"\nimport loadTweets from \"./loadTweets\"\n\nexport function TweetList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const newTweets = props.newTweets\n\n    useEffect(() => {\n        const finalTweets = [...newTweets, ...tweetsInit]\n        if (finalTweets.length !== tweetsInit.length) {\n            setTweets(finalTweets)\n        }\n    }, [newTweets, tweetsInit])\n\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            if (status === 200) {\n            setTweetsInit(response)\n            setTweets(response)\n            } else {\n            alert(response.message)\n            }\n        }\n        loadTweets(myCallback)\n    }, [])\n    \n    return (\n        <div>\n            {\n                tweets.map((tweet, index) => <Tweet key={index} tweet={tweet} className=\"my-10 mx-auto bg-light text-success shadow-lg text-center\" />)\n            }\n        </div>\n    )\n}","import { TweetsComponent } from \"./TweetsComponent\"\nexport default TweetsComponent","import React, { useState } from 'react'\nimport { TweetList } from \"./TweetList\"\n\nexport function TweetsComponent(props) {\n\tconst textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempTweet = [...newTweets]\n        tempTweet.unshift({\n            content: newVal,\n            id: 123,\n            likes: 455\n        })\n        setNewTweets(tempTweet)\n        textAreaRef.current.value = ''\n    }\n\n    return (\n        <div className={ props.className }>\n            <div className=\"col-2 mb-3\">\n                <form onSubmit={ handleSubmit }>\n                    <textarea required={ true } ref={ textAreaRef } className=\"tweet-form\"></textarea>\n                    <button type=\"submit\">Tweet</button>\n                </form>\n            </div>\n            <TweetList newTweets={ newTweets }/>\n        </div>\n    )\n}","import \"./App.css\"\nimport TweetsComponent from './tweets'\n\nfunction App() {\n    console.log(\"I'm in app!!!\")\n    return (\n        <div className=\"App\">\n            <TweetsComponent/>\n        </div>\n    );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport TweetsComponent from './tweets';\n\n\nconst root = document.getElementById('tweetme-root') || document.getElementById('root')\n\nReactDOM.render(\n  <React.StrictMode>\n    {\n      root.id === 'tweetme-root' ? (\n        <TweetsComponent />\n      ) : (\n        <App />\n      )\n    }\n  </React.StrictMode>,\n  root\n) \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}